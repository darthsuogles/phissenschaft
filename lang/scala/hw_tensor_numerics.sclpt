/**
  * TensorFlow Scala API
  */
// In order to make it work, we have to set `LD_LIBRARY_PATH` to
// include the path to libtensorflow.so and libtensorflow_framework.so
import $ivy.`org.platanios::tensorflow:0.4.2-SNAPSHOT`
import org.platanios.tensorflow.api._

import scala.collection.mutable.ArrayBuffer
import scala.util.Random

val t1 = Tensor(1.2, 4.5)
val t2 = Tensor(-0.2, 1.1)
t1 + t2 == Tensor(1.0, 5.6)

val random = new Random()
val weight = random.nextFloat()

val inputs = tf.placeholder[Float](Shape(-1, 1))
val outputs = tf.placeholder[Float](Shape(-1, 1))
val weights = tf.variable[Float]("weights", Shape(1, 1), tf.ZerosInitializer)
val predictions = tf.matmul(inputs, weights)
val loss = tf.sum(tf.square(tf.subtract(predictions, outputs)))
val trainOp = tf.train.AdaGrad(1.0f).minimize(loss)

def batch(batchSize: Int): (Tensor[Float], Tensor[Float]) = {
  val inputs = ArrayBuffer.empty[Float]
  val outputs = ArrayBuffer.empty[Float]
  var i = 0
  while (i < batchSize) {
    val input = random.nextFloat()
    inputs += input
    outputs += weight * input
    i += 1
  }
  (Tensor[Float](inputs).reshape(Shape(-1, 1)),
    Tensor[Float](outputs).reshape(Shape(-1, 1)))
}

println("Training the linear regression model.")
val session = Session()
session.run(targets = tf.globalVariablesInitializer())
for (i <- 0 to 50) {
  val trainBatch = batch(10000)
  val feeds = Map(inputs -> trainBatch._1, outputs -> trainBatch._2)
  val trainLoss = session.run(feeds = feeds, fetches = loss, targets = trainOp)
  if (i % 1 == 0)
    println(s"Train loss at iteration $i = ${trainLoss.scalar} " +
      s"(weight = ${session.run(fetches = weights.value).scalar})")
}
session.close()
