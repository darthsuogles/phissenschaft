import $ivy.`com.typesafe.akka::akka-actor:2.5.19`

import akka.actor._

// We have to encapsulate everything inside a scope so that
// they are evaluated in one round
object MSG {
  object Printer {
    def props: Props = Props[Printer]
    final case class Greeting(greeting: String)
  }

  class Printer extends Actor with ActorLogging {
    import Printer._

    def receive = {
      case Greeting(greeting) =>
        log.info(s"Greeting received (from ${sender()}): $greeting")
    }
  }

  object Greeter {
    def props(message: String, printerActor: ActorRef): Props =
      Props(new Greeter(message, printerActor))

    final case class WhoToGreet(who: String)
    case object Greet
  }

  class Greeter(message: String, printerActor: ActorRef) extends Actor {
    import Greeter._
    import Printer._

    var greeting = ""

    def receive = {
      case WhoToGreet(who) =>
        greeting = message + ", " + who
      case Greet =>
        printerActor ! Greeting(greeting)
    }
  }
}

val system = ActorSystem("testSystem")
// Create the printer actor
val printer: ActorRef = system.actorOf(MSG.Printer.props, "printerActor")

// Create the 'greeter' actors
val howdyGreeter: ActorRef =
  system.actorOf(MSG.Greeter.props("Howdy", printer), "howdyGreeter")
val helloGreeter: ActorRef =
  system.actorOf(MSG.Greeter.props("Hello", printer), "helloGreeter")
val goodDayGreeter: ActorRef =
  system.actorOf(MSG.Greeter.props("Good day", printer), "goodDayGreeter")

// First designate the message sender
goodDayGreeter ! MSG.Greeter.WhoToGreet("julesarus")
// Then flush the greeting message
goodDayGreeter ! MSG.Greeter.Greet

system.terminate()  // returns a Future
