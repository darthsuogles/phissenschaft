#+TITLE: Rust

#+BEGIN_SRC rustic :crates '(("regex" . "0.2") ("darling" . "0.1"))
  fn main() {
      println!("{}", "salut tout le monde");
  }
#+END_SRC

#+RESULTS:
: salut tout le monde


#+BEGIN_SRC rustic
  use List::*;

  enum List {
      Cons(u32, Box<List>),
      Nil,
  }

  impl List {
      fn new() -> List {
          Nil
      }

      fn prepend(self, elem: u32) -> List {
          Cons(elem, Box::new(self))
      }

      fn len(&self) -> u32 {
          match *self {
              Cons(_, ref tail) => 1 + tail.len(),
              Nil => 0,
          }
      }

      fn stringify(&self) -> String {
          match *self {
              Cons(head, ref tail) => format!("{} {}", head, tail.stringify()),
              Nil => format!("Nil"),
          }
      }
  }

  fn main() {
      let mut list = List::new();
      list = list.prepend(1);
      list = list.prepend(2);
      list = list.prepend(3);
      println!("linked list has length: {}", list.len());
      println!("{}", list.stringify());
  }
#+END_SRC

#+RESULTS:
: linked list has length: 3
: 3 2 1 Nil



#+BEGIN_SRC rustic
  fn main() {
      let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>
      for elem in &v {
          println!("{}", elem);
      }
  }
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
